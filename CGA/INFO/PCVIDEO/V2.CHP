

                        2  Programming the Hardware


           Functional Components of IBM PC and PS/2 Video Subsystems
                            Monitor ş Video Buffer
                     Color and Character Display Hardware
                                CRT Controller

                           The Display Refresh Cycle
                      Horizontal Timing ş Vertical Timing

                        Programming the CRT Controller
               MDA ş CGA ş Hercules Adapters ş EGA ş MCGA ş VGA

                            Basic CRTC Computations
                Dot Clock ş Horizontal Timing ş Vertical Timing

                            The CRT Status Register

                                  Video Modes
                Resolution ş Colors ş Video Buffer Organization

                          Hardware Video Mode Control
                           MDA ş CGA and MCGA ş HGC
                      HGC+ and InColor Card ş EGA and VGA
                              Video BIOS Support

                       Combinations of Video Subsystems
                    MDA ş Hercules ş CGA ş EGA ş MCGA ş VGA



     This chapter describes IBM PC and PS/2 video hardware from a
     programmer's point of view. It covers the basics: which parts of the
     computer's video subsystem can be programmed, how a program interacts
     with the hardware, and how calculations for changing the video display
     format are performed. Many of the programming techniques in later
     chapters are based on the fundamental information discussed here.

     The purpose of this chapter is to demystify the hardware programming
     interface. Because most programmers rely on the video BIOS to perform
     most, if not all, hardware-level programming in their applications, an
     aura of mystery surrounds the way software interacts with video
     hardware. Of course, after you learn about it, you may wish it had
     remained a mystery--but the more you know, the more your programs will
     be able to do with the video hardware.


Functional Components of IBM PC and PS/2 Video Subsystems


     As you write programs that interact with IBM video hardware, it helps
     to visualize the relationships among the programmable components of
     IBM video subsystems (see Figure 2-1). You do not need a circuit
     designer's understanding of the hardware to write a good video
     interface. You do need to know where and how your program can interact
     with the hardware to produce video output efficiently.


     ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
     ³             ³  Attributes       ³  Attribute  ³
     ³    Video    ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³   decoder   ³
     ³    Buffer   ³                   ³             ³
     ³             ³                   ÀÄÄÄÄÄÄÂÄÄÄÄÄÄÙ
     ³             ³                          ³Color, intensity, etc.
     ÀÄÄÄÄÄÄÂÄÄÄÄÄÄÙ                          
            ³Character codes           ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                                      ³             ³
     ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                   ³    Video    ³Video drive signals
     ³ Alphanumeric³                   ³   signal    ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
     ³  character  ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³  generator  ³(to video display)
     ³  generator  ³                   ³             ³
     ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                                             
            ³Horizontal & vertical timing   ³  ³Internal timings,
            ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ  ³buffer addressing, etc.
     ÚÄÄÄÄÄÄÁÄÄÄÄÄÄ¿                   ÚÄÄÄÄÄÄÄÁÄÄÄÄÄ¿
     ³     CRT     ³                   ³    Mode     ³
     ³ Controller  ³                   ³   control   ³
     ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


     Figure 2-1.  Programmable components (video buffer, attribute
     controller, and so on) of the IBM PC and PS/2 video subsystems. Some
     or all of these components are under software control in each of the
     video subsystems described in this book.


Monitor

     The most tangible part of a computer's video hardware is the monitor,
     or video display. However, there's nothing you can directly program in
     the monitor's hardware. It is the computer's video subsystem that
     contains programmable hardware. The signals generated by the video
     subsystem control what appears on the screen.

     The monitor differs from a home television receiver in that a group of
     separate timing and color signals drives it. In contrast, a home TV
     decodes a single "composite" signal that contains timing, color, and
     audio information. Although some IBM PC video adapters can generate
     such composite video output signals, as well as the direct drive
     signals that computer monitors use, most people avoid using a home
     television with their computers. Both text and colors appear sharper
     on a computer monitor than they do on a composite television screen.

     All the video monitors discussed in this book are raster-scan devices.
     The image on the screen of a monitor is made up of a group of closely
     spaced horizontal lines called the raster. An electron beam scans each
     successive line from left to right, starting at the upper left corner
     of the display. As the beam sweeps each line, the color and brightness
     of each of several hundred points (pixels) in the line are varied, and
     the entire raster appears as a coherent image.

     Conceptually, you can regard the electron beam as having "color" and
     "intensity," but in color video monitors the beam actually comprises
     three separate electron beams. Each beam controls the display of one
     of the three primary video colors (red, green, and blue) on the
     screen. Each pixel on a color display is physically represented by a
     small, closely spaced triad of red, green, and blue luminescent dots
     or stripes of phosphor. The three electron beams are masked in such a
     way that each illuminates dots of only one primary color. Thus, the
     relative intensity of the beams as they sweep over each triad
     determines the color and brightness of the pixels. Of course, unless
     you use a magnifying glass or look closely at the display, you do not
     perceive the red, green, and blue dots individually, but rather as
     blended colors.


Video Buffer

     The video buffer is a block of RAM in the video subsystem where
     displayable data is stored. This RAM lies within the address space of
     the computer's CPU, so a program may read from and write to the video
     buffer in the same way it accesses any other portion of RAM.

     The video subsystem's display circuitry updates, or refreshes, the
     screen by continually and repeatedly reading the data in the video
     buffer. Each bit or group of bits in the video buffer specifies the
     color and brightness of a particular location on the screen. The
     screen is refreshed between 50 and 70 times a second, depending on
     which video subsystem is in use. Obviously, when a program changes the
     displayed contents of the video buffer, the screen changes almost
     immediately.

     The actual amount of RAM available as a video buffer varies with the
     video subsystem. Most IBM video subsystems incorporate video buffers
     large enough to hold more than one screen of displayable data, so only
     part of the buffer is visible on the screen at any time. (Chapter 3
     discusses how to make full use of available video RAM.)


Color and Character Display Hardware

     All IBM video subsystems incorporate hardware that reads and decodes
     the data in the video buffer. For example, an alphanumeric character
     generator translates ASCII codes from the video buffer into the dot
     patterns that make up characters on the screen. An attribute decoder
     translates other data in the video buffer into the signals that
     produce colors, underlining, and so forth. Software can control these
     and other specialized components of the video subsystem; later
     chapters describe such programming in detail.


CRT Controller

     The CRT Controller (or CRTC for short) generates horizontal and
     vertical timing signals. It also increments a video buffer address
     counter at a rate that is synchronized with the timing signals. The
     video display circuitry reads data from the video buffer using the
     CRTC's address value, decodes the data, and sends the resulting color
     and brightness signals to the monitor along with the CRTC's timing
     signals. In this way the CRTC synchronizes the display of data from
     the video buffer with the timing signals that drive the video display.

     The CRTC performs several other miscellaneous functions. Among them
     are determining the size and displayed position of the hardware
     cursor, selecting the portion of the video buffer to be displayed,
     locating the hardware underline, and detecting light pen signals.
     (Chapter 3 contains examples of CRTC programming for some of these
     functions.)

     On the MDA, CGA, and Hercules cards, the CRTC is a single chip, the
     Motorola 6845. On the EGA, the CRTC is a custom LSI (large-scale
     integration) chip designed by IBM. On the MCGA, the CRTC is part of
     its Memory Controller Gate Array. The VGA's CRTC is one component of
     the single-chip Video Graphics Array. Regardless of the hardware
     implementation, the CRTC can be programmed to generate a variety of
     timing parameters in all these subsystems. Before delving into the
     techniques of CRTC programming, however, it is worthwhile to review
     how the CRTC's timing signals control the monitor's display of a
     raster-scan video image.


The Display Refresh Cycle


     The video image is refreshed in a cyclic manner between 50 and 70
     times a second, depending on the configuration of the video subsystem.
     During each refresh cycle, the electron beam sweeps across the screen
     in a zigzag fashion, starting at the left side of the topmost
     horizontal line in the raster (see Figure 2-2). After scanning a line
     from left to right, the beam is deflected down to the start of the
     next line until the entire raster is scanned. Then the beam returns to
     the upper left corner of the display, and the cycle repeats.


             ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
             º                                          º
             º    Figure 2-2 is found on page 17        º
             º    in the printed version of the book.   º
             º                                          º
             ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼

     Figure 2-2.  The path followed by the electron beam in a raster scan.


Horizontal Timing

     A number of carefully timed events occur as the beam moves across the
     display. At the beginning of each line, the electron beam is turned on
     in response to a Display Enable signal that the CRTC generates. As the
     beam sweeps left to right across the line, the video display circuitry
     uses the CRTC's address counter to read a sequence of bytes from the
     video buffer. The data is decoded and used to control the color and
     brightness signals sent to the monitor. As the beam sweeps across the
     screen, its color and brightness vary in response to these signals.

     Near the screen's right edge, the CRTC turns off the Display Enable
     signal and no further data is displayed from the video buffer. The
     CRTC then generates a horizontal sync signal, which causes the monitor
     to deflect the electron beam leftward and downward to the start of the
     next horizontal line in the raster. Then the CRTC turns the Display
     Enable signal back on to display the next line of data.

     The short period of time between the end of one line of video data and
     the beginning of the next is called the horizontal blanking interval.
     Because the horizontal retrace interval (the amount of time required
     to deflect the beam to the start of the next line) is shorter than the
     horizontal blanking interval, a certain amount of horizontal overscan
     is generated on both ends of each line (see Figure 2-3).


                ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                ³        ³ Vertical overscan        ³
                ³   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿   ³
                ³   ³                           ³   ³
                ³   ³                           ³   ³
                ³   ³                           ³   ³
      Horizontal³   ³                           ³   ³ Horizontal
      overscan  ³Ä³                           ³Ä³ overscan
                ³   ³                           ³   ³
                ³   ³                           ³   ³
                ³   ³                           ³   ³
                ³   ³                           ³   ³
                ³   ³                           ³   ³
                ³   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ   ³
                ³        ³ Vertical overscan        ³
                ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

     Figure 2-3.  Overscan.


     During periods of horizontal overscan, the electron beam can be left
     on, displaying an overscan, or border, color. However, the primary
     reason horizontal overscan is designed into a video subsystem is to
     provide a margin of error in centering the raster, so that no data is
     lost at the edges of the screen.


Vertical Timing

     Once the electron beam has scanned all horizontal lines in the raster,
     the Display Enable signal is turned off. The CRTC then generates a
     vertical sync signal, which tells the monitor to deflect the electron
     beam from the bottom of the screen back to the upper left corner. The
     vertical retrace interval (during which the beam travels from the
     bottom to the top of the screen) is shorter than the vertical blanking
     interval (during which no data from the video buffer is displayed), so
     there are areas of vertical overscan at the top and bottom of the
     raster (see Figure 2-3). Like horizontal overscan, vertical overscan
     provides a border as well as a safety margin so that the raster can be
     centered on the screen.


Programming the CRT Controller


     The CRTC programming interface is well defined and easy to use. The
     same general programming approach applies to all IBM PC and PS/2 video
     subsystems.


MDA

     The Monochrome Display Adapter's CRTC, the Motorola 6845, has nineteen
     8-bit internal data registers. The contents of each register control
     various characteristics of the timing signals generated by the 6845
     (see Figure 2-4). One of these registers is an address register; its
     contents indicate which of the other 18 can be accessed. Most of the
     registers are write-only, but registers 0EH and 0FH, which control the
     position of the hardware cursor, may be read as well as written. On
     the MDA, the 6845's Address register is mapped to an I/O port at 3B4H,
     and the remaining 18 registers are all mapped to the next I/O port
     at 3B5H.

     To access the 6845's data registers, you first write the register
     number to the 6845's Address register (I/O port 3B4H). Then you access
     the specified data register with an I/O write or read at port 3B5H.
     For example, Listing 2-1 shows how to determine the current cursor
     location by reading the contents of registers 0EH and 0FH on the 6845.
     These two registers (Cursor Location High and Cursor Location Low)
     contain the high-order and low-order bytes of the cursor location
     relative to the start of the video buffer.


Register  Name                          Read/Write Access
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00H       Horizontal Total              Write only
01H       Horizontal Displayed          Write only
02H       Horizontal Sync Position      Write only
03H       Horizontal Sync Pulse Width   Write only
04H       Vertical Total                Write only
05H       Vertical Total Adjust         Write only
06H       Vertical Displayed            Write only
07H       Vertical Sync Position        Write only
08H       Interlace Mode                Write only
09H       Maximum Scan Line             Write only
0AH       Cursor Start                  Write only
0BH       Cursor End                    Write only
0CH       Start Address High            Write only
0DH       Start Address Low             Write only
0EH       Cursor Location High          Read/Write
0FH       Cursor Location Low           Read/Write
10H       Light Pen High                Read only
11H       Light Pen Low                 Read only
     Figure 2-4.  Motorola 6845 CRTC data registers (for the MDA, CGA, and
     Hercules video adapters).


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

     Listing 2-1.  Reading the 6845 Cursor Location registers.

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


     With the MDA, there is rarely any reason to change the values in any
     of the 6845 registers except 0AH and 0BH (Cursor Start and Cursor End)
     and 0EH and 0FH (Cursor Location High and Low). Registers 00H through
     09H control the horizontal and vertical timing signals, which should
     not be changed. Registers 0CH and 0DH (Start Address High and Start
     Address Low), which indicate what part of the MDA's video buffer is
     displayed, should always be set to 0.


CGA

     The Color Graphics Adapter's CRTC is a Motorola 6845, as is the MDA's.
     The same programming technique used to access the CRTC on the MDA also
     works on the CGA. On the CGA, however, the CRTC Address register is
     mapped to I/O port 3D4H and the data registers are accessed at 3D5H.
     If you write a program that can run on either an MDA or a CGA, you can
     take advantage of the fact that the video BIOS routines in both the PC
     and PS/2 families maintain the value of the CRTC's Address register
     I/O port in a variable. Many of the programming examples in this book
     reference this variable, ADDR_6845, which is located at 0040:0063 in
     the BIOS Video Display Data Area.


Hercules Adapters

     Like the MDA and CGA, the Hercules Graphics Card, Graphics Card Plus,
     and InColor Card all use a Motorola 6845 as a CRTC. The CRTC registers
     are mapped at I/O ports 3B4H and 3B5H on all Hercules adapters.
     Although it is a color adapter, the InColor Card uses the MDA's I/O
     port and video buffer addresses in order to preserve compatibility
     with the MDA and with Hercules monochrome adapters.

       ÉÍÍÍ»     On all Hercules video adapters (as well as the EGA, MCGA,
       º T º     and VGA), you can set both the address and data registers
       º I º     of the CRTC with one 16-bit port write (OUT DX,AX) instead
       º P º     of two 8-bit port writes  (OUT DX,AL). For example, the
       ÈÍÍÍ¼     two sequences of code that follow do the same thing to the
                 CRTC.

mov     dx,3B4h         ; CRTC address register
mov     al,0Ch          ; CRTC register number
out     dx,al           ; select this register
inc     dx              ; DX := 3B5h (CRTC data register)
mov     al,8            ; data
out     dx,al           ; store data in register
dec     dx

     and

mov     dx,3B4h         ; CRTC address register
mov     ax,080Ch        ; AL := reg number, AH := data
out     dx,ax           ; store data in register

EGA

     The Enhanced Graphics Adapter's CRTC is a proprietary LSI chip with a
     set of registers different from those in the 6845 (see Figure 2-5).
     The programming interface is similar to the 6845's, but the register
     assignments and formats are different enough that programs that write
     directly to CRTC registers on the MDA or CGA will probably crash on an
     EGA.

     The EGA's CRTC supports a wider set of control functions than does the
     6845. For example, the CRTC can cause a hardware interrupt at the
     start of a vertical blanking interval. The CRTC also supports the
     simultaneous display of two noncontiguous portions of the video
     buffer. (Chapter 12 describes these CRTC capabilities.)

     A curious feature of the EGA's CRTC is its Overflow register (07H).
     Because the EGA can display a raster of more than 256 lines, the CRTC
     registers that contain a number of scan lines must be 9 bits wide
     instead of 8. The high-order bit in each of these registers is stored
     in the Overflow register.


Register  Name                          EGA Read/Write Access
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00H       Horizontal Total              Write only
01H       Horizontal Display Enable End Write only
02H       Start Horizontal Blanking     Write only
03H       End Horizontal Blanking       Write only
04H       Start Horizontal Retrace      Write only
05H       End Horizontal Retrace        Write only
06H       Vertical Total                Write only
07H       Overflow                      Write only
08H       Preset Row Scan               Write only
09H       Maximum Scan Line Address     Write only
0AH       Cursor Start                  Write only
0BH       Cursor End                    Write only
0CH       Start Address High            Read/Write
0DH       Start Address Low             Read/Write
0EH       Cursor Location High          Read/Write
0FH       Cursor Location Low           Read/Write
10H       Vertical Retrace Start        Write only
10H       Light Pen High                Read only
11H       Vertical Retrace End          Write only
11H       Light Pen Low                 Read only
12H       Vertical Display Enable End   Write only
13H       Offset (Logical Line Width)   Write only
14H       Underline Location            Write only
15H       Start Vertical Blanking       Write only
16H       End Vertical Blanking         Write only
17H       Mode Control                  Write only
18H       Line Compare                  Write only
     Figure 2-5.  EGA and VGA CRT Controller data
     registers.


MCGA

     In the MCGA, the functions of a CRTC are integrated into a circuit
     component called the Memory Controller Gate Array. The first 16 Memory
     Controller registers are analogous to those in the 6845 (see Figure 2-
     6). As on the CGA, all MCGA Memory Controller registers, including
     the CRTC registers, are indexed through an address register at I/O
     port 3D4H. The data registers themselves may be accessed at port
     3D5H.

     Several features of the MCGA's CRTC distinguish it from the CGA's
     6845. All of the Memory Controller registers can be read as well as
     written. Moreover, registers 00H through 07H may be designated read-
     only so that horizontal and vertical timing parameters are not
     inadvertently disrupted. Setting bit 7 of the Memory Controller Mode
     Control register (10H) to 1 protects registers 00H through 07H.

     Another feature of the MCGA CRTC is that the hardware can compute the
     horizontal timing parameters for each of the available video modes.
     When bit 3 of the Mode Control register is set to 1, and when the
     values in registers 00H through 03H represent appropriate horizontal
     timing values for 40-by-25 alphanumeric mode (video BIOS mode 0), the
     Memory Controller generates proper horizontal timing signals in all
     available video modes.

     If you compare the MCGA CRTC and the Motorola 6845 register by
     register, you will note several discrepancies in the interpretation of
     the values stored in some CRTC registers. In particular, the values
     expected in registers 09H, 0AH, and 0BH are specified in units of two
     scan lines on the MCGA, instead of one scan line on the 6845. Because
     the default alphanumeric character matrix on the MCGA is 16 scan lines
     high, this feature provides a certain amount of low-level
     compatibility, letting you use the same values for these registers as
     you would on a CGA.


Register  Name                               Read/Write Access
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00H       Horizontal Total                   Read/Write
01H       Horizontal Displayed               Read/Write
02H       Start Horizontal Sync              Read/Write
03H       Sync Pulse Width                   Read/Write
04H       Vertical Total                     Read/Write
05H       Vertical Total Adjust              Read/Write
06H       Vertical Displayed                 Read/Write
07H       Start Vertical Sync                Read/Write
08H       (reserved)
09H       Scan Lines per Character           Read/Write
0AH       Cursor Start                       Read/Write
0BH       Cursor End                         Read/Write
0CH       Start Address High                 Read/Write
0DH       Start Address Low                  Read/Write
0EH       Cursor Location High               Read/Write
0FH       Cursor Location Low                Read/Write
10H       Mode Control                       Read/Write
11H       Interrupt Control                  Read/Write
12H       Character Generator, Sync Polarity Read/Write
13H       Character Generator Pointer        Read/Write
14H       Character Generator Count          Read/Write
20-3FH    (reserved)
     Figure 2-6.  MCGA Memory Controller data registers. Registers 00H
     through 0FH are comparable to those in the CGA's CRT Controller.


VGA

     Functionally, the VGA's CRTC registers (see Figure 2-5) comprise a
     superset of those in the EGA's CRTC. The VGA's CRTC register set is
     addressable at the same I/O ports as the EGA's. A few more bit fields
     have been added to the register set, primarily so that the CRTC can
     handle 400-line and 480-line rasters. However, unlike the EGA's CRTC,
     the VGA's CRTC does not support the use of a light pen.

     More important, however, all the EGA's CRTC register specifications
     have been carried over to the VGA. Thus, programs that write to the
     EGA's CRTC registers can be run unchanged on VGA-based hardware.

     As on the MCGA, the VGA's CRTC data registers can all be read as well
     as written. Also, the VGA horizontal and vertical timing registers
     (CRTC registers 00H through 07H) can be write-protected by setting bit
     7 of the Vertical Retrace End register (11H) to 1.

       ÉÍÍÍ»     As on Hercules adapters, you can program the CRTC on the
       º T º     EGA, MCGA, and VGA using a 16-bit port write (OUT DX,AX).
       º I º     Moreover, you will find by experimenting that 16-bit port
       º P º     writes work on many non-IBM video adapters. But stay away
       ÈÍÍÍ¼     from this technique on MDAs, CGAs, and clones if
                 portability is important.


Basic CRTC Computations


     To use the CRTC effectively, you must be able to perform the basic
     computations necessary to specify the CRTC's timings correctly. These
     computations are based on three constraints: the bandwidth of the
     video signal sent to the monitor and the monitor's horizontal and
     vertical synchronization rates.


Dot Clock

     IBM PC video subsystems display pixels at a rate determined by the
     hardware. This rate is variously known as the video bandwidth, the dot
     rate, or the pixel rate; the oscillator that generates this rate is
     called the dot clock. The MDA, CGA, and Hercules adapter use only one
     dot clock; on the EGA and VGA, more than one dot clock is available
     (see Figure 2-7). The higher the dot clock frequency, the better the
     displayed pixel resolution.

     Given the dot rate, the CRTC must be programmed so that the horizontal
     and vertical scan frequencies sent to the video display are limited to
     frequencies the display can handle. Older displays, such as the IBM
     Monochrome Display, are designed to handle only one horizontal and one
     vertical scan rate. Newer displays, such as the NEC MultiSync, can
     synchronize with a range of horizontal and/or vertical scan rates.


                       Video Bandwidth     Horizontal Scan   Vertical Scan
IBM Subsystem          (Dot Rate) in MHz   Rate in KHz       Rate in Hz
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
MDA, HGC
720x350 mono           16.257              18.43             50

CGA
640x200 color          14.318              15.75             60

EGA 
640x350 color          16.257              21.85             60
640x200 color          14.318              15.75             60
720x350 mono           16.257              18.43             50

InColor 
720x350 color          19.000              21.80             60

MCGA
640x400 mono/color     25.175              31.50             70
640x480 mono/color     25.175              31.50             60

VGA
640x400 mono/color     25.175              31.50             70
720x400 mono/color     28.322              31.50             70
640x480 mono/color     25.175              31.50             60
640x350 mono/color     25.175              31.50             70
     Figure 2-7.  Basic timings for IBM video subsystems.


Horizontal Timing

     Consider how you would calculate the typical CRTC register values
     shown in Figure 2-8 for an MDA with an IBM Monochrome Display. The
     MDA's video bandwidth (dot rate) is 16.257 MHz; that is, 16,257,000
     dots per second. The monochrome display's horizontal scan rate is
     18.432 KHz (18,432 lines per second). Dividing the dot rate by the
     horizontal scan rate gives 882 dots per line. Each character displayed
     by the MDA is 9 dots wide, so the total number of characters in each
     line is 882 / 9, or 98.

     This value is used to program the CRTC's Horizontal Total register.
     For the MDA's CRTC, a Motorola 6845, the value you store in the
     Horizontal Total register must be 1 less than the computed total, or
     97 (61H).


Register  Name                      Parameter       Description
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00H       Horizontal Total          97 (61H)        (total characters per
                                                    scan line) - 1

01H       Horizontal Displayed      80 (50H)        Characters displayed in
                                                    each scan line

02H       Horizontal Sync Position  82 (52H)        Position in scan line
                                                    where horizontal
                                                    retrace starts

03H       Horizontal Sync Width     15 (0FH)        Duration of horizontal
                                                    retrace interval
                                                    (character clocks)

04H       Vertical Total            25 (19H)        Total character rows in
                                                    one frame

05H       Vertical Total Adjust     2               Remaining scan lines in
                                                    one frame

06H       Vertical Displayed        25 (19H)        Character rows dis-
                                                    played in each frame

07H       Vertical Sync Position    25 (19H)        Position in frame where
                                                    vertical retrace
                                                    starts

08H       Interlace Mode            2               Always set to 2

09H       Maximum Scan Line         13 (0DH)        (height of one charac-
                                                    ter in scan lines) - 1
     Figure 2-8.  Typical CRTC parameters for the Monochrome Display
     Adapter.


     In terms of CRTC timings, the Horizontal Total value describes the
     amount of time, in "character clocks," required to complete one
     horizontal scan. During this period, 80 characters are actually
     displayed. (This is the value used for the Horizontal Displayed
     register.) The other 18 character clocks are spent in horizontal
     overscan and in horizontal retrace.

     The duration of the horizontal retrace interval is about 10 to 15
     percent of the Horizontal Total value. The exact value depends on the
     video subsystem. On the MDA, the horizontal retrace interval is set at
     15 character clocks by storing this value in the CRTC Horizontal Sync
     Width register. This leaves 3 character clocks of horizontal overscan.
     The horizontal retrace signal is programmed to start 2 character
     clocks after the rightmost displayed character by storing the value 82
     (52H) in the CRTC Horizontal Sync Position register. Thus, there are 2
     character clocks of right horizontal overscan and 1 character clock of
     left overscan.

       ÉÍÍÍ»     Changing the value in the Horizontal Sync Position
       º T º     register changes the size of the right and left overscan
       º I º     areas and thus the horizontal position of the displayed
       º P º     raster. For example, to shift the displayed raster to the
       ÈÍÍÍ¼     left, increase the size of the right overscan interval by
                 increasing the value in the CRTC Horizontal Sync Position
                 register.


Vertical Timing

     Similar considerations apply in programming the CRTC to generate
     appropriate vertical timings. The nominal horizontal scan rate in the
     MDA's monochrome display is 18.432 KHz (18,432 lines per second) with
     a vertical scan rate of 50 Hz (50 frames per second), so the number of
     lines in one frame is 18,432 / 50, or 368. Since each character
     displayed is 14 lines high, 25 rows of characters account for 350
     lines. The MDA's CRTC always uses 16 lines for vertical retrace; this
     leaves 368 - (350 + 16), or 2 lines of vertical overscan.

     The CRTC programming follows these calculations. The height of each
     displayed character is specified by the value in the CRTC Maximum Scan
     Line register. Since characters are 14 scan lines high, the maximum
     scan line value is 13 (0DH). Taken together, the values for Vertical
     Total (25 character rows) and Vertical Total Adjust (2 scan lines)
     indicate the total number of scan lines in one frame. The number of
     character rows displayed (25) is indicated in the Vertical Displayed
     register. The position in the frame where vertical retrace starts (25)
     is specified by the value in the Vertical Sync Position register.

     The CRTCs on the MCGA, EGA, and VGA are more complex than the Motorola
     6845 CRTC on the MDA and CGA. Nevertheless, the registers that control
     horizontal and vertical timings in the newer video subsystems are
     similar in nomenclature and functionality to the 6845's registers. The
     computations for the MCGA, EGA, and VGA CRTCs are derived from the dot
     rate, the character size, and the horizontal and vertical capabilities
     of the video display, just as they are for the MDA and CGA.


The CRT Status Register


     All IBM video subsystems have a read-only CRT Status register. This
     register is located at I/O port 3BAH on the MDA and Hercules adapters
     and at 3DAH on the CGA and MCGA; on the EGA and VGA, this register is
     at 3BAH in monochrome configurations and at 3DAH in color
     configurations. Generally, two of the eight bits in this register
     reflect the current status of the horizontal and vertical timing
     signals generated by the CRTC. These status bits can be used to
     synchronize video buffer updates with the screen refresh cycle to
     minimize interference with the displayed image. (Chapter 3 contains
     examples of this type of programming.)

     Unfortunately, the exact interpretation of the status bits in the CRT
     Status register varies among the different IBM video subsystems (see
     Figure 2-9). Therefore, programs should be designed to determine
     which hardware they are running on (Appendix C) before they attempt
     to use the status information in this register.

     Listing 2-2 shows how the status bits in the CRTC Status register are
     used to synchronize program operation with the video refresh cycle.
     This subroutine can be used on the CGA to time the horizontal blanking
     interval. The subroutine uses bit 3 of the CRT Status register, which
     indicates when the CRTC's vertical sync signal is active, to
     synchronize with the start of a refresh cycle. The loops at L01 and
     L02 show how this is done.

     The loops at L03 and L04 then synchronize with the Display Enable
     signal, using bit 0 of the CRT Status value. When the Display Enable
     signal goes off, the loop at L05 decrements the value in CX during the
     horizontal blanking interval, that is, while the Display Enable signal
     is off. The number of iterations counted in CX can then be used as a
     timeout value to determine when the last horizontal line in the frame
     has been scanned. (See Chapter 3.)


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

     Listing 2-2.  Timing the horizontal blanking interval on the CGA

                TITLE   'Listing 2-2'
                NAME    HRTimeout
                PAGE    55,132

;
; Name:         HRTimeout
;
; Function:     Determine a timeout value for the horizontal blanking interval
;
; Caller:       Microsoft C:
;
;                       int HRTimeout();
;

_TEXT           SEGMENT byte public 'CODE'
                ASSUME  cs:_TEXT

                PUBLIC  _HRTimeout
_HRTimeout      PROC    near

                push    bp              ; usual C prologue to establish
                mov     bp,sp           ;  stack frame

                mov     ax,40h
                mov     es,ax           ; ES := video BIOS data segment

                mov     dx,es:[63h]     ; DX := port for CRTC Address register
                add     dl,6            ; DX := port for CRTC Status register

; synchronize with start of refresh cycle

L01:            in      al,dx           ; AL := CRTC status
                test    al,8            ; test bit 3
                jz      L01             ; loop while NOT in vertical retrace

L02:            in      al,dx
                test    al,8
                jnz     L02             ; loop during vertical retrace

; synchronize with a horizontal scan and time the horizontal blanking interval

                mov     cx,0FFFFh       ; CX := loop counter

                cli                     ; disable interrupts

L03:            in      al,dx
                test    al,1
                jnz     L03             ; loop while Display Enable is inactive

L04:            in      al,dx
                test    al,1
                jz      L04             ; loop while Display Enable is active

L05:            in      al,dx
                test    al,1
                loopnz  L05             ; decrement CX and loop while Display
                                        ;  Enable is inactive

                sti                     ; enable interrupts again

                mov     ax,cx           ; AX := loop counter
                neg     ax
                shl     ax,1            ; AX := timeout value

                mov     sp,bp           ; discard stack frame and return to C
                pop     bp
                ret

_HRTimeout      ENDP

_TEXT           ENDS

                END


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


Video Modes


     Despite the timing constraints imposed by the dot clock and the rated
     horizontal and vertical scan rates of available monitors, all IBM
     video subsystems except the MDA can be programmed with a variety of
     different CRTC parameters. This makes a number of video modes
     available. Each video mode is characterized by its resolution (the
     number of characters or pixels displayed horizontally and vertically),
     by the number of different colors that can be displayed
     simultaneously, and by the format of the displayable data in the video
     buffer.


Resolution

     The horizontal and vertical resolution in a video mode is a function
     of the dot rate as well as the monitor's horizontal and vertical scan
     rates. The number of pixels displayed in each frame corresponds to the
     dot rate divided by the vertical scan rate. The actual horizontal and
     vertical resolution then depends on the horizontal scan rate.

                    Register    Bit 7               Bit 3               Bit 2               Bit 1             Bit 0
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
MDA                 3BA                             Video drive                                               1 = horizontal sync

HGC, HGC+, InColor  3BA         0 = vertical sync   Video drive                             1 = light pen     1 = horizontal sync
                                                                                                trigger
CGA                 3DA                             1 = vertical sync   1 = light pen       1 = light pen     0 = display enable
                                                                            switch closed       trigger
EGA                 3BA or 3DA                      1 = vertical sync   1 = light pen       1 = light pen     0 = display enable
                                                                            switch closed       trigger
VGA                 3BA or 3DA                      1 = vertical sync                                         0 = display enable

MCGA                3DA                             1 = vertical sync1                                       0 = display enable
     Figure 2-9.  CRTC Status register bit assignments


Colors

     The number and variety of colors that can be displayed in a video mode
     depend on the design of the video subsystem's attribute decoding and
     video signal generator components. The attribute decoder uses data
     stored in the video buffer to control the color and brightness signals
     produced by the video signal generator. Establishing a particular
     video mode always involves programming a video subsystem's attribute
     decoder in addition to updating its CRTC parameters.


Video Buffer Organization

     The format of the data in video RAM also characterizes a video mode.
     In all PC and PS/2 subsystems, video modes can be classified as
     alphanumeric or graphics modes, depending on the video buffer data
     format. In alphanumeric modes, the data in the video buffer is
     formatted as a sequence of ASCII code and attribute byte pairs; the
     alphanumeric character generator translates the ASCII codes into
     displayed characters while the attribute bytes specify the colors used
     to display them (see Chapter 3). In graphics modes, the video buffer
     is organized as a sequence of bit fields; the bits in each field
     designate the color of a particular pixel on the screen.


Hardware Video Mode Control


     Establishing a video mode on an IBM PC or PS/2 video subsystem
     generally requires specific mode control programming apart from
     specifying CRTC parameters. For example, the alphanumeric character
     generator must be enabled in alphanumeric modes and disabled in
     graphics modes. Also, the subsystem's internal character clock, which
     determines the number of pixels generated for each alphanumeric
     character code read from the video buffer, may run at different rates
     in different video modes. These and other internal functions are
     controlled by loading one or more specialized mode control registers
     with values appropriate for each video mode.


MDA

     The MDA's Mode Control register is a write-only register mapped to
     port 3B8H (see Figure 2-10). Only three of the eight bits in this
     register have meaning. Bit 0 is set to 1 at powerup and must always
     remain set to 1. Bit 3, when set to 1, enables video refresh; clearing
     this bit blanks the screen. Bit 5 is the Enable Blink bit; it controls
     whether characters can blink. On the MDA, most programs leave bit 3
     set at all times. Chapter 3 explains how to use bit 5 (the Enable
     Blink bit).


Bit         Settings
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0           1 = adapter enabled (should always = 1)
1           (unused, should always = 0)
2           (unused, should always = 0)
3           1 = video enabled
            0 = video disabled (screen blank)
4           (unused, should always = 0)
5           1 = blinking attribute enabled
            0 = blinking attribute disabled
6           (unused, should always = 0)
7           (unused, should always = 0)
     Figure 2-10.  Bit settings for the MDA Mode Control register (3B8H).


CGA and MCGA

     The Mode Control register on the CGA and MCGA is found at 3D8H (see
     Figure 2-11a). The five low-order bits control internal timings
     appropriate for the video modes they select, while bit 5 is an Enable
     Blink bit just as it is on the MDA. The useful bit patterns for the
     CGA's Mode Control register are listed in Figure 2-11b. These values
     correspond to the available BIOS video modes on the CGA.

     The Mode Control registers on the CGA and the MCGA have two
     differences. One is that the MCGA Mode Control register may be read as
     well as written; the CGA register is write-only. The other difference
     relates to the function of bit 2. On the CGA, setting bit 2 to 1
     disables the color burst component of the composite video output
     signal. This can improve the quality of the display if you are using a
     composite green or amber monitor with a CGA. On the MCGA, which does
     not support a composite monitor, the function of bit 2 of the Mode
     Control register is to select between two sources for the foreground
     color in 2-color graphics modes.


Bit         Settings
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0           1 = 80-character alphanumeric modes
            0 = 40-character alphanumeric modes
1           1 = 320-wide graphics mode
            0 = (all other modes)
2           1 = color burst disabled (CGA only)
            1 = foreground color from video DAC register 7 (MCGA only)
            0 = color burst enabled (CGA only)
            0 = foreground color from the video DAC register specified
                in bits 0-3 of the Palette register (3D9H) (MCGA only)
3           1 = video enabled
            0 = video disabled (screen blank)
4           1 = 640-wide graphics modes
            0 = (all other modes)
5           1 = blinking attribute enabled
            0 = blinking attribute disabled
6           (unused, should always = 0)
7           (unused, should always = 0)
     Figure 2-11a.  Bit settings for the CGA and MCGA Mode Control register
     (3D8H).


BIOS Mode                                Value for Mode
Number      Description                  Control Register
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0           40x25 alpha                  00101100b (2CH)
              (color burst disabled)
1           40x25 alpha                  00101000b (28H)
2           80x25 alpha                  00101101b (2DH)
              (color burst disabled)
3           80x25 alpha                  00101001b (29H)
4           320x200 graphics             00101010b (2AH)
5           320x200 graphics             00101110b (2EH)
              (color burst disabled)
6           640x200 graphics             00011100b (1CH)
7           80x25 alpha                  00101001b (29H)
              (MDA only)
11H         640x480 graphics             00011000b (18H)
              (MCGA only)
     Figure 2-11b.  MDA, CGA, and MCGA Mode Control register options.


     The MCGA has two additional mode control registers, which are not
     implemented on the CGA. The MCGA Memory Controller Mode Control
     register (10H) at port 3D4H/3D5H selects 640-by-480 2-color and 320-
     by-200 256-color graphics modes (see Figure 2-12). An Extended Mode
     Control register is mapped to I/O port 3DDH. This register is used
     only during machine coldstart; it has no practical use in applications
     programs.


Bit         Settings
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0           1 = select 320x200 256-color mode
            0 = (all other modes)
1           1 = select 640x480 2-color mode
            0 = (all other modes)
2           (reserved)
3           1 = horizontal timing parameters computed for video mode
            0 = horizontal timing parameters as specified in registers
                00-03H
4           1 = enable dot clock (should always be 1)
5           (reserved)
6           Inverse of bit 8 of Vertical Displayed register (06H)
7           1 = write-protect registers 00-07H
            0 = allow updating of registers 00-07H
     Figure 2-12.  Bit settings for the MCGA Memory Controller Mode Control
     register.


HGC

     The Hercules Graphics Card has two control registers whose contents
     affect the video mode configuration. The Mode Control register at 3B8H
     is functionally compatible with the MDA's Mode Control register, but
     it maps additional mode configuration functions to bits 1 and 7 (see
     Figure 2-13). Bit 1, when set to 1, establishes internal timings for
     a 720-by-348 graphics mode. Setting bit 7 to 1 while the adapter is in
     graphics mode displays the second half of the adapter's 64 KB video
     buffer at B800:0000. These bits have no function, however, unless the
     appropriate bits in the adapter's Configuration Switch register are
     set properly.

     The Configuration Switch register (3BFH) determines the function of
     the Mode Control register at 3B8H (see Figure 2-14). When bit 0 of
     the Configuration Switch register is 0, the HGC cannot be placed in
     its graphics mode, so bit 1 of the Mode Control register must also be
     0. Bit 1 of the Configuration Switch register controls video buffer
     addressing when the adapter is used in combination with a CGA or
     compatible (see below).


Bit         Settings
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0           (unused)
1           1 = 720x348 graphics mode
            0 = 80x25 alphanumeric mode
2           (unused, should always = 0)
3           1 = video enabled
            0 = video disabled (screen blank)
4           (unused, should always = 0)
5           1 = blinking attribute enabled
            0 = blinking attribute disabled
6           (unused, should always = 0)
7           1 = graphics mode buffer displayed from B800:0000 (video
                page 1)
            0 = graphics mode buffer displayed from B000:0000 (video
                page 0)
     Figure 2-13.  Bit settings for the Hercules Mode Control register
     (3B8H). This register is the same on the HGC, HGC+, and InColor Card.


Bit         Settings
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0           1 = allows graphics mode
            0 = prevents graphics mode
1           1 = enables upper 32 KB of graphics mode video buffer at
                B800:0000
            0 = disables upper 32 KB of graphics mode buffer
2-7         (unused)
     Figure 2-14.  Bit settings for the Hercules Configuration Switch
     register (3BFH). This register is the same on the HGC, HGC+, and
     InColor Card.


HGC+ and InColor Card

     The HGC+ and InColor Card implement an extended mode control register
     (called the xMode register) in addition to the Mode Control and
     Configuration Switch registers found on the HGC. The xMode register is
     a write-only register addressable as register 14H at port 3B4H/3B5H.
     (The register is addressed exactly as if it were a CRTC register.) The
     xMode register controls the alphanumeric character generator; Chapter
     10 explains this in detail.


EGA and VGA

     When you establish a video mode on the EGA and the VGA, you can
     control the internal timing and addressing of several different
     components of the video subsystem. These include the Sequencer, the
     Graphics Controller, and the Attribute Controller, each of which has
     several control registers. There is also a Miscellaneous Output
     register, which controls I/O port and video buffer addressing and
     selects the dot clock frequency.

       ÉÍÍÍ»     All Sequencer, Graphics Controller, and Attribute
       º T º     Controller registers on the EGA are write-only registers,
       º I º     but on the VGA they can be read as well as written.
       º P º
       ÈÍÍÍ¼


     Sequencer
     The Sequencer generates internal timings for video RAM addressing. It
     has five programmable data registers (see Figure 2-15) mapped to
     ports 3C4H and 3C5H in a manner analogous to CRTC register mapping.
     The Sequencer's Address register is located at 3C4H; its five data
     registers are selected by storing an index value between 0 and 4 in
     the Address register and then accessing the corresponding data
     register at 3C5H.


Register    Name
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0           Reset
1           Clocking Mode
2           Map Mask
3           Character Map Select
4           Memory Mode
     Figure 2-15.  EGA and VGA Sequencer registers.


     Graphics Controller
     The Graphics Controller mediates data flow between the video buffer
     and the CPU, as well as from the video buffer to the Attribute
     Controller. The Graphics Controller has nine data registers, plus an
     Address register (see Figure 2-16). The Address register maps to
     port 3CEH, and the data registers map to port 3CFH.


Register    Name
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0           Set/Reset
1           Enable Set/Reset
2           Color Compare
3           Data Rotate/Function Select
4           Read Map Select
5           Graphics Mode
6           Miscellaneous
7           Color Don't Care
8           Bit Mask
     Figure 2-16.  EGA and VGA Graphics Controller registers.


     Attribute Controller
     The Attribute Controller supports a 16-color palette on the EGA and
     VGA. It also controls the color displayed during overscan intervals.
     The Attribute Controller's Address register and 21 data registers all
     map to I/O port 3C0H (see Figure 2-17). A value written to port 3C0H
     will be stored in either the Address register or a data register,
     depending on the state of a flip-flop internal to the Attribute
     Controller.


Register(s) Function
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0-0FH       Palette
10H         Attribute Mode Control
11H         Overscan Color
12H         Color Plane Enable
13H         Horizontal Pixel Panning
14H         Color Select (VGA only)
     Figure 2-17.  EGA and VGA Attribute Controller registers.


     To set the flip-flop, perform an I/O read (IN AL,DX) of the CRT Status
     register (port 3BAH in monochrome modes, 3DAH in color modes). Listing
     2-3 illustrates how this is done in updating an Attribute Controller
     register. On the VGA, Attribute Controller data registers may be read
     as well as written. Do this by writing the register number to port
     3C0H and then reading the value from port 3C1H.


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

     Listing 2-3.  Updating the EGA or VGA Attribute Controller

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


       ÉÍÍÍ»     You can use 16-bit port writes (OUT DX,AX) to store data
       º T º     in EGA and VGA Sequencer and Graphics Controller
       º I º     registers. On the EGA, you can use the same technique to
       º P º     program the Attribute Controller, which recognizes I/O
       ÈÍÍÍ¼     port writes at 3C1H as well as 3C0H. However, the VGA
                 Attribute Controller does not emulate the EGA in this
                 regard, so this technique should be used carefully when
                 VGA compatibility is important.


Video BIOS Support

     The video BIOS supports a number of different video modes on IBM PC
     and PS/2 video subsystems (see Figure 2-18). The video BIOS routines,
     which can be called with INT 10H, let you establish a video mode
     simply by specifying its number.

     Not all of the BIOS video modes are available on all IBM PC video
     subsystems. Furthermore, the video BIOS does not support video mode
     configurations on non-IBM hardware unless it exactly emulates the
     corresponding IBM hardware.

     For example, all Hercules video adapters emulate IBM's MDA exactly.
     Thus, the video BIOS can be used to select the monochrome alphanumeric
     mode (BIOS mode 7) on all Hercules products. However, the Hercules
     hardware also supports a 720-by-348 graphics mode which is not
     recognized by IBM's video BIOS. Consequently, to set up the Hercules
     graphics mode, a program must configure the hardware directly (see
     Listing 2-4.)

Mode
Number                                            Mode      Buffer
(hex)  Resolution                        Colors   Type      Segment   MDA  CGA  EGA  MCGA  VGA
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0      40x25 chars (320x200 pixels)1,2  16       Alpha     B800           x    x    x     x
0      40x25 chars (320x350 pixels)2    16       Alpha     B800                x          x
0      40x25 chars (320x400 pixels)      16       Alpha     B800                     x
0      40x25 chars (360x400 pixels)2    16       Alpha     B800                           x
1      40x25 chars (320x200 pixels)2    16       Alpha     B800           x    x    x     x
1      40x25 chars (320x350 pixels)2    16       Alpha     B800                x          x
1      40x25 chars (320x400 pixels)      16       Alpha     B800                     x
1      40x25 chars (360x400 pixels)2    16       Alpha     B800                           x
2      80x25 chars (640x200 pixels)1,2  16       Alpha     B800           x    x    x     x
2      80x25 chars (640x350 pixels)2    16       Alpha     B800                x          x
2      80x25 chars (640x400 pixels)      16       Alpha     B800                     x
2      80x25 chars (720x400 pixels)2    16       Alpha     B800                           x
3      80x25 chars (640x200 pixels)2    16       Alpha     B800           x    x    x     x
3      80x25 chars (640x350 pixels)2    16       Alpha     B800                x          x
3      80x25 chars (640x400 pixels)      16       Alpha     B800                     x
3      80x25 chars (720x400 pixels)2    16       Alpha     B800                           x
4      320x200 pixels                     4       Graphics  B800           x    x    x     x
5      320x200 pixels3                   4       Graphics  B800           x    x    x     x
6      640x200 pixels                     2       Graphics  B800           x    x    x     x
7      80x25 chars (720x350 pixels)2     2       Alpha     B000      x         x          x
7      80x25 chars (720x400 pixels)2     2       Alpha     B000                           x
8      (PCjr only)
9      (PCjr only)
0A     (PCjr only)
0B     (used by EGA video BIOS)
0C     (used by EGA video BIOS)
0D     320x200 pixels                    16       Graphics  A000           x         x
0E     640x200 pixels                    16       Graphics  A000           x         x
0F     640x350 pixels                     2       Graphics  A000           x         x
10     640x350 pixels4                   4       Graphics  A000           x
10     640x350 pixels                    16       Graphics  A000           x         x
11     640x480 pixels                     2       Graphics  A000                x    x
12     640x480 pixels                    16       Graphics  A000                     x
13     320x200 pixels                   256       Graphics  A000                x    x
     Figure 2-18.  ROM BIOS video modes


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

     Listing 2-4.  Configuring a Hercules adapter for 720-by-348 graphics
     mode

                TITLE   'Listing 2-4'
                NAME    HercGraphMode
                PAGE    55,132

;
; Name:         HercGraphMode
;
; Function:     Establish Hercules 720x348 graphics mode on HGC, HGC+, InColor
;
; Caller:       Microsoft C:
;
;                               void HercGraphMode();
;

DGROUP          GROUP   _DATA

_TEXT           SEGMENT byte public 'CODE'
                ASSUME  cs:_TEXT,ds:DGROUP

                PUBLIC  _HercGraphMode
_HercGraphMode  PROC    near

                push    bp              ; preserve caller registers
                mov     bp,sp
                push    si
                push    di

; Update Video BIOS Data Area with reasonable values

                mov     ax,40h
                mov     es,ax
                mov     di,49h          ; ES:DI := 0040:0049 (BIOS data area)

                mov     si,offset DGROUP:BIOSData
                mov     cx,BIOSDataLen
                rep     movsb           ; update BIOS data area

; Set Configuration Switch

                mov     dx,3BFh         ; DX := Configuration Switch port
                mov     al,1            ; AL bit 1 := 0 (exclude 2nd 32K of
                                        ;                 video buffer)
                                        ; AL bit 0 := 1 (allow graphics mode
                out     dx,al           ;                setting via 3B8h)

; Blank the screen to avoid interference during CRTC programming

                mov     dx,3B8h         ; DX := CRTC Mode Control Register port
                xor     al,al           ; AL bit 3 := 0 (disable video signal)
                out     dx,al           ; blank the screen

; Program the CRTC

                sub     dl,4            ; DX := CRTC Address Reg port 3B4h

                mov     si,offset DGROUP:CRTCParms
                mov     cx,CRTCParmsLen

L01:            lodsw                   ; AL := CRTC register number
                                        ; AH := data for this register
                out     dx,ax
                loop    L01

; Set graphics mode

                add     dl,4            ; DX := 3B8h (CRTC Mode Control Reg)
                mov     al,CRTMode      ; AL bit 1 = 1 (enable graphics mode)
                                        ;    bit 3 = 1 (enable video)
                out     dx,al

                pop     di              ; restore registers and exit
                pop     si
                mov     sp,bp
                pop     bp
                ret

_HercGraphMode  ENDP

_TEXT           ENDS


_DATA           SEGMENT word public 'DATA'

                                ; These are the parameters recommended by Hercules.
                                ; They are based on 16 pixels/character and
                                ; 4 scan lines per character.

CRTCParms       DB      00h,35h ; Horizontal Total:  54 characters
                DB      01h,2Dh ; Horizontal Displayed:  45 characters
                DB      02h,2Eh ; Horizontal Sync Position:  at 46th character
                DB      03h,07h ; Horizontal Sync Width:  7 character clocks

                DB      04h,5Bh ; Vertical Total:  92 characters (368 lines)
                DB      05h,02h ; Vertical Adjust:  2 scan lines
                DB      06h,57h ; Vertical Displayed:  87 character rows (348 lines)
                DB      07h,57h ; Vertical Sync Position:  after 87th char row

                DB      09h,03h ; Max Scan Line:  4 scan lines per char

CRTCParmsLen    EQU     ($-CRTCParms)/2

BIOSData        DB      7       ; CRT_MODE
                DW      80      ; CRT_COLS
                DW      8000h   ; CRT_LEN
                DW      0       ; CRT_START
                DW      8 dup(0) ; CURSOR_POSN
                DW      0       ; CURSOR_MODE
                DB      0       ; ACTIVE_PAGE
CRTCAddr        DW      3B4h    ; ADDR_6845
CRTMode         DB      0Ah     ; CRT_MODE_SET (value for port 3B8h)
                DB      0       ; CRT_PALETTE (unused)

BIOSDataLen     EQU     $-BIOSData

_DATA           ENDS

                END


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


Combinations of Video Subsystems


     IBM designed the original MDA and CGA such that both adapters can be
     used in the same PC. This is possible because the CRTC registers and
     other control and status registers are assigned to a different range
     of I/O ports on the MDA than on the CGA. The MDA's port addresses
     range from 3B0H through 3BFH, while the CGA's range from 3D0H through
     3DFH. Also, the video buffers on the MDA and the CGA occupy different
     portions of the 80x86 address space: The MDA's 4 KB video buffer is at
     B000:0000, while the CGA's 16 KB buffer starts at B800:0000.

     This separation was carried forward in the design of the EGA. The
     EGA's I/O port and video buffer addressing are programmable. When the
     EGA is attached to a monochrome monitor, the MDA-compatible addresses
     are used. When the EGA is used with a color monitor, the CGA-
     compatible addresses are used. Thus, an EGA can coexist with either an
     MDA or a CGA.

     Figure 2-19 shows which PC and PS/2 video subsystems can coexist in
     the same computer. The table reflects the dichotomy between MDA-
     compatible and CGA-compatible I/O port and video buffer addressing. As
     a rule of thumb, you can usually combine one MDA-compatible adapter
     and one CGA-compatible adapter in the same system.

     NOTE: The Hercules InColor Card should be regarded as an MDA-
     compatible adapter, even though it is ostensibly a color card. In
     fact, if you use the InColor Card in a PS/2 Model 30 with a monochrome
     monitor attached to the Model 30's MCGA, you end up with the strange
     combination of an MDA-compatible color subsystem and a CGA-compatible
     monochrome subsystem in the same computer.

     The BIOS video mode routines generally support dual-display
     configurations. The video BIOS routines use bits 4 and 5 of the
     variable EQUIP_FLAG at 0040:0010 in the BIOS video data area to choose
     between two video subsystems. If there are addressing conflicts
     between two subsystems, the BIOS in the MCGA and VGA provides a
     "display switch" interface that lets you independently disable and
     enable each subsystem (see Appendix A).


              MDA   CGA   EGA   MCGA   VGA Adapter   HGC   HGC+   InColor
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
MDA                 x     x     x      x
CGA           x           x                          x     x      x
EGA           x     x                                x     x      x
MCGA          x                        x             x     x      x
VGA Adapter   x                 x                    x     x      x
HGC                 x     x     x      x
HGC+                x     x     x      x
InColor             x     x     x      x
     Figure 2-19.  Allowable combinations of IBM PC and PS/2 video
     subsystems.


     With some combinations of video adapters, the address space the two
     subsystems' video buffers occupy may overlap even if their I/O port
     address assignments do not. In this situation you must selectively
     exclude part or all of one subsystem's video buffer from the CPU
     memory map so that the CPU can access the other subsystem's buffer
     without addressing conflicts. The technique for doing this varies with
     the hardware.


MDA

     The MDA's video buffer is mapped to the addresses between B000:0000
     and B000:FFFF. The same buffer is also mapped to the 4 KB blocks of
     RAM starting at segments B100H, B200H, and so on through B700H,
     although there is no real reason for software to use these alternate
     address maps. The MDA's video buffer address mapping cannot be
     disabled.


Hercules

     On the HGC, the HGC+, and the InColor Card, the video buffer occupies
     the 64 KB of RAM starting at B000:0000. The second 32 KB of the video
     buffer overlaps the address space of a CGA's video buffer (starting at
     B800:0000). For this reason these Hercules adapters are designed so
     that the second 32 KB can be selectively excluded from the CPU memory
     map. The extent of the video buffer address space depends upon the
     value you store in the Configuration Switch register (3BFH). When bit
     1 of this register is 0 (the power-on default), video RAM occupies
     addresses from B000:0000 through B000:7FFF, which excludes the second
     32 KB portion from the CPU memory map and allows the card to be used
     with a CGA. To make the second half of the video buffer addressable,
     set bit 1 to 1.


CGA

     The CGA's video buffer maps to the addresses between B800:0000 and
     B800:3FFF. The same buffer is also mapped between BC00:0000 and
     BC00:3FFF, although few programs use this alternate address map. As
     with the MDA, the CGA's video buffer mapping cannot be altered.

     This is not the case, however, for all CGA clones. The Hercules Color
     Card (not to be confused with the InColor Card) is a CGA work-alike
     whose video buffer can be excluded from the CPU's address space. This
     is achieved by setting bit 1 of the card's Configuration Switch
     register (3BFH) to 1. This register maps to the same I/O port as the
     equivalent register on an HGC, HGC+, or InColor Card, but the polarity
     of the control bit is opposite that on the other Hercules cards. Thus,
     by toggling this bit, software can address the video buffers on both a
     Hercules Color Card and another Hercules adapter without addressing
     conflicts.


EGA

     The EGA's video buffer can be mapped to any of four locations,
     depending on the values of bits 2 and 3 in the Graphics Controller
     Miscellaneous register (see Figure 2-20). The default values for
     these bits depend on the video mode. When the video BIOS sets up a
     video mode, it sets these bits to appropriate values.


Bit 3       Bit 2       Video Buffer Address Range
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0           0           A000:0000-B000:FFFF
0           1           A000:0000-A000:FFFF
1           0           B000:0000-B000:7FFF
1           1           B800:0000-B800:7FFF
     Figure 2-20.  Control of EGA and VGA video buffer addressing with the
     Graphics Controller Miscellaneous register.


     The EGA also provides another level of control over the video buffer
     address map. When set to 0, bit 1 of the EGA's Miscellaneous Output
     register (3C2H) excludes the entire video buffer from the CPU memory
     address space.


MCGA

     The MCGA's 64 KB video buffer occupies the addresses between A000:0000
     and A000:FFFF, but the second 32 KB of the buffer, starting at
     A000:8000 (A800:0000), also maps to the CGA video buffer address range
     (B800:0000 through B800:7FFF). CPU addressing of the MCGA's video
     buffer and I/O ports can be disabled by setting bit 2 of the system
     board control port at 65H to 0. Listing 2-5 shows how INT 10H function
     12H can be called to set or reset this bit.

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

     Listing 2-5.  Enable or disable video I/O port and buffer addressing
     on an MCGA or VGA.

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


VGA

     Control over the VGA's video buffer address map is the same as on the
     EGA. However, there are two different methods of disabling CPU
     addressing of the video subsystem, depending on whether you are using
     an integrated VGA (in a PS/2 Model 50, 60, or 80) or the VGA Adapter.
     In the integrated subsystem, the Video Subsystem Enable Register
     (3C3H) controls both video buffer addressing and I/O port addressing;
     setting bit 0 of this register to 0 disables addressing, and setting
     bit 0 to 1 enables addressing.

     On the VGA Adapter, the Video Subsystem Enable register does not
     exist. Instead, bit 3 of the control register at I/O port 46E8H
     enables and disables addressing: Writing a default value of 0EH to
     this port enables addressing; writing a value of 6 disables
     addressing.

     In all VGA subsystems, however, INT 10H function 12H provides the same
     interface as it does on the MCGA (see Listing 2-5). Because of the
     hardware differences between the MCGA, the integrated VGA and the VGA
     Adapter, it is easier to use INT 10H function 12H to enable or disable
     addressing in the PS/2 video subsystems (see Listing 2-5).

